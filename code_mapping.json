{"4a1170e9-4fc4-4e55-86ad-c95b85cb0e97": "# Define two numbers\nnum1 = 5\nnum2 = 3\n\n# Add the numbers\nsum = num1 + num2\n\n# Print the result\nprint(\"The sum is:\", sum)", "f386d184-be5c-45d7-b9ed-c897ff920fef": "# Define two numbers\nnum1 = 5\nnum2 = 3\n\n# Add the numbers\nsum = num1 + num2\n\n# Print the result\nprint(\"The sum is:\", sum)", "f24350b8-6825-4d8b-8371-8ea16f4c73be": "# Define two numbers\nnum1 = 5\nnum2 = 3\n\n# Add the numbers\nsum = num1 + num2\n\n# Print the result\nprint(\"The sum is:\", sum)", "6d06c3ce-2327-4967-a8ca-2f6f85db9c67": "# Define two numbers\nnum1 = 5\nnum2 = 3\n\n# Add the numbers\nsum = num1 + num2\n\n# Print the result\nprint(\"The sum is:\", sum)", "d5fa6647-5305-4a42-b550-5d10d4284c32": "import os\nimport uuid\nfrom flask import Flask, request, jsonify, send_from_directory\nfrom flask_cors import CORS\nfrom .obfuscator.lexer import tokenize_code\nfrom .obfuscator.parser import parse_ast\nfrom .obfuscator.transformer import transform_ast\nfrom .obfuscator.generator import generate_obfuscated_code\nfrom .obfuscator.deobfuscator import deobfuscate_code\nfrom .utils import save_mapping, load_mapping\n\napp = Flask(__name__, static_folder=os.path.join(os.getcwd(), 'frontend'))\nCORS(app)  # Enable CORS for API calls\n\n# API endpoints\n@app.route(\"/obfuscate\", methods=[\"POST\"])\ndef obfuscate():\n    data = request.json\n    source_code = data.get(\"code\", \"\")\n    \n    # Lexical Analysis (optional for debugging)\n    tokens = tokenize_code(source_code)\n    \n    # Parsing: Build the AST from source code\n    ast_tree = parse_ast(source_code)\n    if ast_tree is None:\n        return jsonify({\"error\": \"Syntax Error in source code\"}), 400\n    \n    # Transformation: Obfuscate the AST\n    transformed_ast = transform_ast(ast_tree)\n    \n    # Code Generation: Convert AST back to source code and encode it\n    obfuscated_code = generate_obfuscated_code(transformed_ast)\n    \n    # Generate a security key and save the mapping\n    security_key = str(uuid.uuid4())\n    save_mapping(security_key, source_code)\n    \n    return jsonify({\"obfuscated_code\": obfuscated_code, \"security_key\": security_key})\n\n@app.route(\"/deobfuscate\", methods=[\"POST\"])\ndef deobfuscate():\n    data = request.json\n    obfuscated_code = data.get(\"code\", \"\")\n    security_key = data.get(\"security_key\", \"\")\n    \n    # Load the original code using the security key\n    original_code = load_mapping(security_key)\n    if original_code is None:\n        return jsonify({\"error\": \"Invalid security key\"}), 400\n    \n    return jsonify({\"deobfuscated_code\": original_code})\n\n# Serve the frontend index.html at the root\n@app.route('/')\ndef serve_index():\n    return send_from_directory(os.path.join(os.getcwd(), 'frontend'), 'index.html')\n\n# Serve any static files (CSS, JS, etc.) from the frontend directory\n@app.route('/<path:path>')\ndef serve_static(path):\n    return send_from_directory(os.path.join(os.getcwd(), 'frontend'), path)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n", "ca1568e8-324c-4868-a277-d9b4ff76ab56": "a=10", "a5291ef7-e12f-4c00-8fe9-ab30b8b9dee9": "# Program to generate a random number between 0 and 9\n\n# importing the random module\nimport random\n\nprint(random.randint(0,9))\n"}